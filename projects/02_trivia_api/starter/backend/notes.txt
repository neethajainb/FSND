
API Reference

# General
Base URL: this app is hosted locally under the port 5000. The API base URL is http://127.0.0.1:5000/
Authentication: this app doesn't require any authentication or API tokens.
You must set the header: Content-Type: application/json with every request.

# error Handlers

if any errors accured, the API will return a json object in the following format:

{
    "success": False,
    "error": 404,
    "message": "resource not found"
}

The following errors will be reported:

400: bad request
404: resource not found
405: method not allowed
422: unprocessible


Endpoints

# GET /categories
. General: Returns a list categories.
. Example : http://127.0.0.1:5000/categories



# GET /questions
. General:
  1.Returns a list questions.
  2.Results are paginated in groups of 10.
  3.Also returns list of categories and total number of questions.
.Example : curl http://127.0.0.1:5000/questions


# DELETE /questions/<int:id>
. General:
    1.Deletes a question by id using url parameters.
    2.Returns id of deleted question upon success.
.Example : curl http://127.0.0.1:5000/questions/6 -X DELETE

# POST /questions
  This endpoint either creates a new question or returns search results.
  .General:
    Creates a new question using JSON request parameters.
    Returns JSON object with newly created question, as well as paginated questions.
  .Example : curl http://127.0.0.1:5000/questions -X POST -H "Content-Type: application/json" -d '{ "question": "Which US state contains an area known as the Upper Penninsula?", "answer": "Michigan", "difficulty": 3, "category": "3" }'
 
# Post /questions/search
   If search term is included in request:
    .General:
      Searches for questions using search term in JSON request parameters.
      Returns JSON object with paginated matching questions.
 .Example : curl -X POST  -H "Content-Type: application/json" -d '{"searchTerm":"India"}' http://127.0.0.1:5000/questions/search

# GET /categories/<int:id>/questions
  .General:
      Gets questions by category id using url parameters.
      Returns JSON object with paginated matching questions.
  .Example : 

 # POST /quizzes
 .General:
   Allows users to play the quiz game.
   Uses JSON request parameters of category and previous questions.
   Returns JSON object with random question not among previous questions.
 .Example : curl http://127.0.0.1:5000/quizzes -X POST -H "Content-Type: application/json" -d '{"previous_questions": [1], "quiz_category": {"type": "Science", "id": "1"}}'








mkdir environments
cd project/
cd environments

python3 -m venv trivia
ls
source trivia/bin/activate
pip install --upgrade pip

 
git clone git@github.com:neethajainb/FSND.git


cd FSND/projects/02_trivia_api/starter/backend/
#Use pip3 and not pip
pip install -r requirements.txt
brew install gsl
export LIBRARY_PATH=/usr/local/Cellar/gsl/2.6/lib/


export FLASK_APP=flaskr/
export FLASK_ENV=development
flask run


pip install psycopg2-binary





To start the server 

source project/environments/trivia/bin/activate
cd /Users/neethajain/Documents/fullstack/project/FSND/projects/02_trivia_api/starter/backend
export FLASK_APP=flaskr/
export FLASK_ENV=development
flask run







# Steps to run unit test cases, do not start server
source project/environments/trivia/bin/activate

dropdb trivia_test
createdb trivia_test

cd project/FSND/projects/02_trivia_api/starter/backend/
psql trivia_test < trivia.psql
python test_flaskr.py




# Front end
# First start the backend server in a new terminal
./start_trivia_server.sh

# start a new terminal and run 
cd project/FSND/projects/02_trivia_api/starter/frontend/
npm start


# to commit git


cd project/FSND/projects/02_trivia_api/
 git status
 git diff
 git commit -am "Add run unit cases"
 git push
 history
